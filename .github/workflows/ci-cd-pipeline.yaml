name: CI/CD Pipeline for Kubernetes on AWS

on:
  push:
    branches:
      - main

jobs:
  # build-and-push:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Log in to Docker Hub
  #       run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the repository
    - name: Checkout Code
      uses: actions/checkout@v3

    # Step 2: Log in to Docker Hub
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Step 3: Build and push Docker image
    - name: Build and Push Docker Image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/fintech-app-portfolio-mgr:latest ./app
        docker push ${{ secrets.DOCKER_USERNAME }}/fintech-app-portfolio-mgr:latest

    # Step 4: Configure AWS CLI
    - name: Configure AWS CLI
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    # Step 5: Set up kubectl
    - name: Set Up Kubectl
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
        kubectl version --client

    # Step 6: Configure kubeconfig
    - name: Update Kubeconfig
      run: |
        aws eks update-kubeconfig --region us-east-1 --name ${{ secrets.EKS_CLUSTER_NAME }}

    # Step 7: Deploy Strimzi Operator (if not already deployed)
    - name: Deploy Strimzi Operator
      run: |
        kubectl apply -f app/k8s/strimzi/strimzi-cluster-operator.yaml
        kubectl wait --for=condition=Available --timeout=300s deployment/strimzi-cluster-operator -n kafka


    # Step 8: Deploy Kafka Cluster
    - name: Create Kafka Cluster
      run: |
        kubectl apply -f app/k8s/strimzi/kafka-cluster.yaml
        kubectl wait kafka/my-cluster --for=condition=Ready --timeout=300s -n kafka
        
    # Step 9: Create Kafka Topics
    - name: Create Kafka Topics
      run: |
        kubectl apply -f app/k8s/strimzi/kafka-topics.yaml

    # Step 10: Deploy kafka Applications (Producer and Consumer)
    - name: Deploy Producer and Consumer
      run: |
        kubectl apply -f app/k8s/producer-market-data-sim.yaml
        kubectl apply -f app/k8s/producer-transaction-sim.yaml
        kubectl apply -f app/k8s/consumer-market-data.yaml

    # Step 11: Deploy kafka Services
    - name: Deploy Services
      run: |
        kubectl apply -f app/k8s/producer-market-data-sim-service.yaml
        kubectl apply -f app/k8s/producer-transaction-sim-service.yaml
        kubectl apply -f app/k8s/consumer-market-data-service.yaml

    # Step 12: Deploy Flink Operator using Helm
    - name: Deploy Flink Operator
      run: |
        # Ensure the Helm repo is added and updated
        helm repo add flink-operator-repo https://downloads.apache.org/flink/flink-kubernetes-operator-1.10.0/
        helm repo update

        # Create the Flink namespace if it doesn't already exist
        kubectl create namespace flink-operator || true

        # Install or upgrade the Flink Kubernetes Operator using Helm
        helm upgrade --install flink-kubernetes-operator flink-operator-repo/flink-kubernetes-operator \
          --namespace flink-operator

        # Wait for the Flink Operator to become ready
        kubectl wait --for=condition=Available --timeout=300s deployment/flink-kubernetes-operator -n flink-operator